//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the UnfoldedCircle.Generators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace MyTestNameSpace;

/// <summary>
/// Converter to convert <see cref="global::MyTestNameSpace.MyEnum" /> to and from strings.
/// </summary>
internal sealed partial class MyEnumConverter : global::System.Text.Json.Serialization.JsonConverter<global::MyTestNameSpace.MyEnum>
{
    /// <inheritdoc />
    /// <summary>
    /// Read and convert the JSON to <see cref="global::MyTestNameSpace.MyEnum" />.
    /// </summary>
    /// <remarks>
    /// A converter may throw any Exception, but should throw <see cref="global::System.Text.Json.JsonException" /> when the JSON is invalid.
    /// </remarks>
    public override global::MyTestNameSpace.MyEnum Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        char[]? rentedBuffer = null;
        var bufferLength = reader.HasValueSequence ? checked((int)reader.ValueSequence.Length) : reader.ValueSpan.Length;

        var charBuffer = bufferLength <= 128
            ? stackalloc char[128]
            : rentedBuffer = global::System.Buffers.ArrayPool<char>.Shared.Rent(bufferLength);

        var charsWritten = reader.CopyString(charBuffer);
        global::System.ReadOnlySpan<char> source = charBuffer[..charsWritten];
        
        try
        {
            return GetEnumValue(source);
        }
        finally
        {
            if (rentedBuffer is not null)
            {
                charBuffer[..charsWritten].Clear();
                global::System.Buffers.ArrayPool<char>.Shared.Return(rentedBuffer);
            }
        }
    }

    /// <inheritdoc />
    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::MyTestNameSpace.MyEnum value, global::System.Text.Json.JsonSerializerOptions options)
        => writer.WriteStringValue(GetStringValue(value));

    private static global::MyTestNameSpace.MyEnum GetEnumValue(in global::System.ReadOnlySpan<char> source)
    {
        if (source.Equals("First".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase))
            return global::MyTestNameSpace.MyEnum.First;

        if (source.Equals("Second".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase))
            return global::MyTestNameSpace.MyEnum.Second;

        throw new global::System.Text.Json.JsonException($"{source.ToString()} is not a valid value.", null, null, null);
    }

    private static string GetStringValue(in global::MyTestNameSpace.MyEnum enumValue)
        => enumValue switch
        {
            global::MyTestNameSpace.MyEnum.First => "First",
            global::MyTestNameSpace.MyEnum.Second => "Second",
            _ => throw new global::System.ArgumentOutOfRangeException(nameof(enumValue), enumValue, null)
        };
}
